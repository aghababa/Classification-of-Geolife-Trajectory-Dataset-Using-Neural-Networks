# -*- coding: utf-8 -*-
"""Classifiers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lfmG_NOsDCeX57gOjdMWJOyzjGfR9Brn
"""

import numpy as np
import time
import math
import random
import glob
from scipy import linalg as LA
import pandas as pd
from sklearn.model_selection import train_test_split

float = np.vectorize(float)

def read_file(file_name):
    data = []
    with open(file_name, "r") as f:
        for line in f:
            item = line.strip().split(",") # +[1]
            data.append(float(item))
    return data

I = glob.glob('New_Dist_Vectors/*.csv', recursive=True) #Change to 'Old_Dist_Vectors/*.csv' for the other dataset

r = 128
data_embedded = [0] * r
X_train = [0] * r
X_test = [0] * r
y_train = [0] * r
y_test = [0] * r

for i in range(r):
    data_embedded[i] = np.array(read_file(I[i]))
    X_train[i], X_test[i], y_train[i], y_test[i] = train_test_split(np.array(data_embedded[i]), np.ones(len(data_embedded[i])), test_size=0.3, random_state=109)

data_embedded = np.array(data_embedded)

Start_time = time.time()

mean_train_error = 0
mean_test_error = 0
std_test_error = 0

num_trials = 10

for s in range(num_trials):

    X_train_labeled = [0] * r
    X_test_labeled = [0] * r
    error_train_list_all = []
    error_test_list_all = []

    Start_time_1 = time.time()

    for i in range(r): 

        X_train_labeled[i] = np.concatenate((X_train[i], np.array([[-1]]* len(X_train[i]))), axis =1)
        X_test_labeled[i] = np.concatenate((X_test[i], np.array([[-1]]* len(X_test[i]))), axis =1)

        for j in range(i+1,r):
            X_train_labeled[j] = np.concatenate((X_train[j], np.array([[1]]* len(X_train[j]))), axis =1)
            X_test_labeled[j] = np.concatenate((X_test[j], np.array([[1]]* len(X_test[j]))), axis =1)

            data_fin_train = np.insert(X_train_labeled[i], len(X_train_labeled[i]), X_train_labeled[j], axis = 0)
            Z = list(data_fin_train)
            random.shuffle(Z)
            data_final_train = np.array(Z)

            data_final_test = np.insert(X_test[i], len(X_test[i]), X_test[j], axis = 0)
            data_final_test_labels = np.insert(X_test_labeled[i][:,-1], len(X_test[i]), X_test_labeled[j][:,-1], axis = 0)
            
            #***********************************************************
            #TO DO PART:

            # each time choose one of the following classifiers:
            clf = a fully connected network with 1, 2 and 3 layers, depending on which has a better performance 
            #clf = a CNN with 1, 2 and 3 layers, depending on which has a better performance

            #End of Your Job! :)
            #***********************************************************
            
            #Train the model using the training sets
            clf.fit(data_final_train[:,:-1], data_final_train[:,-1])

            #Predict the response for test dataset
            y_pred = clf.predict(data_final_test)
            ee = 1 - metrics.accuracy_score(data_final_test_labels, y_pred)
            error_test_list_all.append(ee)
            
            x_pred = clf.predict(data_final_train[:,:-1])
            ff = 1 - metrics.accuracy_score(data_final_train[:,-1], x_pred)
            error_train_list_all.append(ff)
    
    mean_train_error += np.mean(error_train_list_all)
    mean_test_error += np.mean(error_test_list_all)
    std_test_error += np.std(error_test_list_all)
    
    print(mean_test_error)
    print('time for step', s, time.time() - Start_time_1)

print('total time =', time.time() - Start_time)

Dic = {}

Dic[1] = [np.round(mean_train_error/num_trials, decimals = 4), 
        np.round(mean_test_error/num_trials, decimals = 4),
        np.round(std_test_error/num_trials, decimals = 4)]

print("Classifier: FC NN with 2? layers ...")

df = pd.DataFrame.from_dict(Dic1, orient='index', columns= ['Train Error','Test Error', 'Std'])
df

E = df.to_latex(index=False)
np.savetxt('Classifiers_FC_NN.tex', [E], fmt='%s') # change the name for each appropriate classifier

